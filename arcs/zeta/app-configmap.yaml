apiVersion: v1
kind: ConfigMap
metadata:
  name: observer-api-code
  namespace: arc-zeta
data:
  app.py: |
    import os, asyncio, json
    from fastapi import FastAPI, WebSocket, WebSocketDisconnect
    from fastapi.responses import PlainTextResponse
    import uvicorn
    from nats.aio.client import Client as NATS

    NATS_URL = os.getenv("NATS_URL","nats://nats.infra.svc.cluster.local:4222")
    SUBJECTS = os.getenv("SUBJECTS","arc.>").split(",")

    app = FastAPI()
    @app.get("/health", response_class=PlainTextResponse)
    async def health():
        return "ok"

    @app.websocket("/ws")
    async def ws(ws: WebSocket):
        await ws.accept()
        nc = NATS()
        try:
            await nc.connect(servers=[NATS_URL], name="observer-api")
            subs = []
            async def forward(msg):
                try:
                    await ws.send_text(json.dumps({
                        "subject": msg.subject,
                        "data": msg.data.decode("utf-8"),
                    }))
                except Exception:
                    pass

            for s in SUBJECTS:
                subs.append(await nc.subscribe(s, cb=forward))

            while True:
                await asyncio.sleep(1)

        except WebSocketDisconnect:
            pass
        finally:
            if nc.is_connected:
                await nc.drain()

    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8080)
