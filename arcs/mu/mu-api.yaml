apiVersion: v1
kind: Namespace
metadata:
  name: arc-mu
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mu-api
  namespace: arc-mu
imagePullSecrets:
  - name: ghcr-creds
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mu-api
  namespace: arc-mu
  labels:
    app: mu-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mu-api
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxSurge: 1, maxUnavailable: 0 }
  template:
    metadata:
      labels:
        app: mu-api
    spec:
      serviceAccountName: mu-api
      securityContext:
        seccompProfile: { type: RuntimeDefault }
      containers:
        - name: app
          image: ghcr.io/silentsage432/mu-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
          env:
            - name: SERVICE_NAME
              value: "mu-api"
            - name: NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: KAPPA_URL
              value: "http://kappa-api.arc-kappa.svc.cluster.local"
            - name: LAMBDA_URL
              value: "http://lambda-api.arc-lambda.svc.cluster.local:8000"
          readinessProbe:
            httpGet: { path: /health, port: 8000 }
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 12
          livenessProbe:
            httpGet: { path: /health, port: 8000 }
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits:   { cpu: 500m, memory: 256Mi }
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            capabilities: { drop: ["ALL"] }
          envFrom:
            # optional: if you later add secrets/config
            - secretRef:
                name: mu-extra
                optional: true
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: mu-api
  namespace: arc-mu
  labels: { app: mu-api }
spec:
  type: ClusterIP
  selector:
    app: mu-api
  ports:
    - name: http
      port: 80
      targetPort: 8000
---
# NetworkPolicy: allow DNS egress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress
  namespace: arc-mu
spec:
  podSelector: {}
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - { protocol: UDP, port: 53 }
        - { protocol: TCP, port: 53 }
---
# NetworkPolicy: allow egress to Kappa & Lambda
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-arc-egress
  namespace: arc-mu
spec:
  podSelector:
    matchLabels: { app: mu-api }
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: arc-kappa
          podSelector:
            matchLabels: { app: kappa-api }
      ports:
        - { protocol: TCP, port: 80 }
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: arc-lambda
          podSelector:
            matchLabels: { app: lambda-api }
      ports:
        - { protocol: TCP, port: 8000 }
---
# NetworkPolicy: allow same-NS ingress to port 8000 (Service access)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-ns-ingress
  namespace: arc-mu
spec:
  podSelector:
    matchLabels: { app: mu-api }
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: arc-mu
      ports:
        - { protocol: TCP, port: 8000 }
