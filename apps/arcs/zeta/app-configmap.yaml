apiVersion: v1
kind: ConfigMap
metadata:
  name: observer-api-code
  namespace: arc-zeta
data:
  app.py: |
    import asyncio, json
    from fastapi import FastAPI, WebSocket, WebSocketDisconnect
    from fastapi.responses import PlainTextResponse
    import uvicorn
    from nats.aio.client import Client as NATS

    NATS_URL = "nats://nats.infra.svc.cluster.local:4222"

    app = FastAPI()
    nc = NATS()

    @app.get("/health")
    async def health():
      return PlainTextResponse("ok")

    @app.on_event("startup")
    async def startup():
      await nc.connect(servers=[NATS_URL])

    @app.on_event("shutdown")
    async def shutdown():
      if nc.is_connected:
        await nc.drain()

    @app.websocket("/ws")
    async def ws(ws: WebSocket):
      await ws.accept()
      sub = await nc.subscribe("arc.>")

      try:
        while True:
          msg = await sub.next_msg()
          data = {
            "topic": msg.subject,
            "data": json.loads(msg.data.decode("utf-8")) if msg.data else None,
          }
          await ws.send_text(json.dumps(data))
      except WebSocketDisconnect:
        await sub.unsubscribe()
      except Exception as e:
        try:
          await ws.send_text(json.dumps({"error": str(e)}))
        except:
          pass
        await sub.unsubscribe()
