apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: grafana-admin
  namespace: observability
stringData:
  admin-user: admin
  admin-password: admin123   # Cursor can rotate this to a strong password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
data:
  loki.yaml: |
    apiVersion: 1
    datasources:
      - name: Loki
        type: loki
        access: proxy
        url: http://loki.observability.svc.cluster.local:3100
        isDefault: true
        jsonData:
          timeout: 60
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: observability
data:
  omega-reason-overview.json: |
    {
      "title": "Omega Reason Stream",
      "schemaVersion": 38,
      "editable": true,
      "panels": [
        {
          "type": "logs",
          "title": "omega.reason (live)",
          "gridPos": {"x":0,"y":0,"w":24,"h":12},
          "options": {
            "dedupStrategy": "none",
            "showTime": true
          },
          "targets": [
            {
              "datasource": "Loki",
              "expr": "{namespace=\"arc-omega\", app=~\"omega-monitor|omega-reason-stream\"} | json"
            }
          ]
        },
        {
          "type": "timeseries",
          "title": "Reason Codes per 5m",
          "gridPos": {"x":0,"y":12,"w":24,"h":8},
          "targets": [
            {
              "datasource": "Loki",
              "expr": "sum by (reason_code) (count_over_time(({namespace=\"arc-omega\", app=~\"omega-monitor|omega-reason-stream\"} | json | reason_code != \"\") [5m]))"
            }
          ]
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
  labels: { app: grafana }
spec:
  replicas: 1
  selector: { matchLabels: { app: grafana } }
  template:
    metadata: { labels: { app: grafana } }
    spec:
      securityContext: { seccompProfile: { type: RuntimeDefault } }
      containers:
        - name: grafana
          image: grafana/grafana:10.4.3
          ports: [{ name: http, containerPort: 3000 }]
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom: { secretKeyRef: { name: grafana-admin, key: admin-user } }
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom: { secretKeyRef: { name: grafana-admin, key: admin-password } }
          volumeMounts:
            - { name: datasources, mountPath: /etc/grafana/provisioning/datasources }
            - { name: dashboards,  mountPath: /etc/grafana/provisioning/dashboards }
            - { name: dashfiles,   mountPath: /var/lib/grafana/dashboards }
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
      volumes:
        - name: datasources
          configMap: { name: grafana-datasources }
        - name: dashboards
          configMap:
            name: grafana-dashboards
            items:
              - key: omega-reason-overview.json
                path: omega-reason-overview.json
        - name: dashfiles
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
spec:
  selector: { app: grafana }
  ports:
    - name: http
      port: 3000
      targetPort: 3000
